#pragma once

#include "assignment/node.hpp"          // Node
#include "assignment/private/list.hpp"  // List

namespace assignment {

  /**
   * Структура данных "связный список".
   * Хранит в себе элементы в виде последовательности "узлов".
   */
  struct LinkedList : List {
   private:
    // поля структуры
    int size_{0};          // кол-вод узлов в списке
    Node* head_{nullptr};  // указатель на первый узел (начало списка)
    Node* tail_{nullptr};  // указатель на последний узел (конец списка)

   public:
    // константы структуры
    static constexpr int kNotFoundIndex = -1;  // индекс ненайденного элемента в списке

    /**
     * Создание пустого связного списка ~ O(1).
     *
     * Инициализирует поля нулевыми значениями.
     */
    LinkedList() = default;

    /**
     * Деструктор ~ O(n).
     *
     * Высвобождает выделенную память.
     * Устанавливает поля в нулевые значения.
     */
    ~LinkedList() override;

    /**
     * Добавление элемента в конец списка ~ O(1).
     *
     * @param value - значение добавляемого элемента
     */
    void Add(int value) override;

    /**
     * Вставка элемента в список по индексу ~ O(n).
     * Вставка в начало или конец списка ~ O(1).
     *
     * @param index - позиция для вставки элемента в список
     * @param value - значение вставляемого элемента
     * @throws out_of_range при передаче индекса за пределами списка
     */
    void Insert(int index, int value) override;

    /**
     * Изменение значения элемента списка по индексу ~ O(n).
     *
     * @param index - позиция изменяемого элемента списка
     * @param new_value - новое значение элемента
     * @throws out_of_range при передаче индекса за пределами списка
     */
    void Set(int index, int new_value) override;

    /**
     * Удаление элемента из списка по индексу ~ O(n).
     * Удаление элемента с начала списка ~ O(1).
     *
     * @param index - позиция удаляемого элемента в списке
     * @return значение удаленного элемента
     * @throws out_of_range при передаче индекса за пределами списка
     */
    int Remove(int index) override;

    /**
     * Очистка списка ~ O(n).
     *
     * Высвобождение выделенной под узлы памяти.
     * Обнуление полей списка.
     */
    void Clear() override;

    /**
     * Получение значения элемента списка по индексу ~ O(n).
     *
     * @param index - позиция элемента в списке
     * @return значение найденного элемента
     * @throws out_of_range при передаче индекса за пределами списка
     */
    int Get(int index) const override;

    /**
     * Поиск индекса первого вхождения узла с указанным значением ~ O(n).
     *
     * @param value - значение элемента
     * @return индекс найденного элемента или kNotFoundIndex - при отсутствии элемента
     */
    int IndexOf(int value) const override;

    /**
     * Проверка наличия элемента в списке по значению ~ O(n).
     *
     * @param value - значение элемента
     * @return true - при наличии узла в списке, false - при отсутствии элемента
     */
    bool Contains(int value) const override;

    /**
     * Проверка пустоты списка ~ O(1).
     *
     * @return true - если список пустой, false - в списке есть элементы
     */
    bool IsEmpty() const override;

    /**
     * Возвращает размер списка ~ O(1).
     *
     * @return количество элементов в списке
     */
    int size() const override;

    /**
     * Возвращает значение первого элемента списка ~ O(1).
     *
     * @return значение первого элемента
     */
    int head() const;

    /**
     * Возвращает значение последнего элемента списка ~ O(1).
     *
     * @return значение последнего узла
     */
    int tail() const;

    /**
     * Поиск узла по индексу ~ O(n).
     *
     * Используется для операций над списком, выполняемым по индексу.
     *
     * @param index - позиция узла в списке
     * @return указатель на найденный узел или nullptr - при некорректном значении позиции
     */
    Node* FindNode(int index) const;
  };

}  // namespace classwork