#pragma once

namespace assignment {

  /**
   * Интерфейс "абстрактный список".
   * Последовательность элементов одинакового типа.
   */
  struct List {

    /**
     * Деструктор.
     *
     * Высвобождает выделенную память.
     * Устанавливает поля в нулевые значения.
     */
    virtual ~List() = default;

    /**
     * Добавление элемента в конец списка.
     *
     * @param value - значение добавляемого элемента
     */
    virtual void Add(int value) = 0;

    /**
     * Вставка элемента в список по индексу.
     *
     * @param index - позиция для вставки элемента в список
     * @param value  - значение вставляемого элемента
     * @throws out_of_range при передаче индекса за пределами списка
     */
    virtual void Insert(int index, int value) = 0;

    /**
     * Изменение значения элемента списка по индексу.
     *
     * @param index - позиция изменяемого элемента в списке
     * @param new_value - новое значение элемента
     * @throws out_of_range при передаче индекса за пределами списка
     */
    virtual void Set(int index, int new_value) = 0;

    /**
     * Удаление элемента из списка по индексу.
     *
     * @param index - позиция удаляемого элемента в списке
     * @return значение удаленного элемента
     * @throws out_of_range при передаче индекса за пределами списка
     */
    virtual int Remove(int index) = 0;

    /**
     * Очистка списка.
     *
     * Поведение зависит от конкретной реализации списка.
     */
    virtual void Clear() = 0;

    /**
     * Получение значения элемента списка по индексу.
     *
     * @param index - позиция элемента в списке
     * @return значение найденного элемента
     * @throws out_of_range при передаче индекса за пределами списка
     */
    virtual int Get(int index) const = 0;

    /**
     * Поиск индекса первого вхождения элемента с указанным значением.
     *
     * @param value - значение элемента
     * @return индекс найденного элемента или kNotFoundIndex - при отсутствии элемента
     */
    virtual int IndexOf(int value) const = 0;

    /**
     * Проверка наличия элемента в списке по значению.
     *
     * @param value - значение элемента
     * @return true - при наличии элемента в списке, false - при отсутствии элемента
     */
    virtual bool Contains(int value) const = 0;

    /**
     * Проверка пустоты списка.
     *
     * @return true - список пустой, false - в списке есть элементы
     */
    virtual bool IsEmpty() const = 0;

    /**
     * Возвращает размер списка.
     *
     * @return количество элементов в списке
     */
    virtual int size() const = 0;
  };

}  // namespace classwork